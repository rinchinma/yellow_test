from aiogram import types, Dispatcher

from create_bot import bot
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message

from models import CustomUser
from modules import FunctionModule

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup


def keyboard_client():
    button_1 = KeyboardButton('‚ùì–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
    button_2 = KeyboardButton('üí∏–ò–º–∏—Ç–∞—Ü–∏—è —Å–¥–µ–ª–∫–∏')
    button_3 = KeyboardButton('üë•–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã')

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)

    keyboard.add(button_1).row(button_2, button_3)
    return keyboard


async def start(message: types.Message):

    module = FunctionModule()
    module.startReferral(message)

    await bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name},'.format(
        name=message.from_user.username
    ), reply_markup=keyboard_client())


def register_handlers_start(dp: Dispatcher):
    dp.register_message_handler(start, commands=['start'])
    dp.register_message_handler(start, text='start', state=None)


"""___________________________________________________________________________________________________"""


async def my_profile(message: types.Message):
    query = CustomUser.get(user_id=message.from_user.id)
    user = CustomUser.get(id=query)

    if user.invited_id != 0:
        invited = user.invited_id
    else:
        invited = '–ü–µ—Ä–µ—à–ª–∏ –Ω–µ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ'

    text = '*–í–∞—à–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} $ \n' \
           '\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {link}\n\n' \
           '–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª: {invited}'.format(
            balance=round(user.balance, 2), link=user.referral_link, invited=invited, parse_mode="Markdown")
    await message.answer(text)


def register_handlers_my_profile(dp: Dispatcher):
    dp.register_message_handler(my_profile, commands=['/‚ùì–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'])
    dp.register_message_handler(my_profile, text='‚ùì–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', state=None)


"""___________________________________________________________________________________________________"""


async def my_referrals(message: types.Message):
    query = CustomUser.get(user_id=message.from_user.id)
    user = CustomUser.get(id=query)
    module = FunctionModule()
    if user.followed_ref_link != '':
        level_one, level_two, level_three, level_four, level_five = module.getMyReferrals(user.followed_ref_link)

        text = '*–í–∞—à —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤–µ—á–µ–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤:*\n' \
               '*–ü–∞—Ä—Ç–Ω–µ—Ä—ã 1 —É—Ä–æ–≤–Ω—è:* {people1} —á–µ–ª.\n{count_people1}' \
               '\n*–ü–∞—Ä—Ç–Ω–µ—Ä—ã 2 —É—Ä–æ–≤–Ω—è:* {people2} —á–µ–ª.\n{count_people2}' \
               '\n*–ü–∞—Ä—Ç–Ω–µ—Ä—ã 3 —É—Ä–æ–≤–Ω—è:* {people3} —á–µ–ª.\n{count_people3}' \
               '\n*–ü–∞—Ä—Ç–Ω–µ—Ä—ã 4 —É—Ä–æ–≤–Ω—è:* {people4} —á–µ–ª.\n{count_people4}' \
               '\n*–ü–∞—Ä—Ç–Ω–µ—Ä—ã 5 —É—Ä–æ–≤–Ω—è:* {people5} —á–µ–ª.\n{count_people5}'.format(
                count_people1=level_one, people1=len(level_one.split(' ')),
                count_people2=level_two, people2=len(level_two.split(' ')),
                count_people3=level_three, people3=len(level_three.split(' ')),
                count_people4=level_four, people4=len(level_four.split(' ')),
                count_people5=level_five, people5=len(level_five.split(' ')), parse_mode="Markdown")

        await message.answer(text)
    else:
        await message.answer('–í—ã –µ—â–µ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏!')


def register_handlers_my_referrals(dp: Dispatcher):
    dp.register_message_handler(my_referrals, commands=['/üë•–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã'])
    dp.register_message_handler(my_referrals, text='üë•–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã', state=None)


"""___________________________________________________________________________________________________"""


class AddStates(StatesGroup):
    stage_one = State()


async def get_stage_one(message: Message, state=FSMContext):
    await message.answer(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ –≤ —Ü–∏—Ñ—Ä–∞—Ö\n'
        '–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, —Å—Ç–æ–∏—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å')
    await AddStates.next()


async def get_stage_two(message: Message, state=FSMContext):
    query = CustomUser.get(user_id=message.from_user.id)
    user = CustomUser.get(id=query)

    module = FunctionModule()
    if user.invited_id != 0:
        await message.answer(user.invited_id)
        for_message_list = module.payReferrer(user.invited_id, int(message.text))

        for user_id in for_message_list:
            if user_id != 0:
                await bot.send_message(int(user_id), '–ü–æ—Å—Ç—É–ø–∏–ª–∞ –≤—ã–ø–ª–∞—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ!\n'
                                                     '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å!')
    else:
        await message.answer('–í–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∏–ª - –ø–æ —Å–µ–º—É –Ω–µ—Ç —Å–º—ã—Å–ª–∞ —Ç–µ—Å—Ç–∏—Ç—å\n'
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ç–µ—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞—Ä–µ—Ñ–µ—Ä–∞–ª–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç')
    await state.finish()


def register_handlers_deal(dp: Dispatcher):
    dp.register_message_handler(get_stage_one, commands=['/üí∏–ò–º–∏—Ç–∞—Ü–∏—è —Å–¥–µ–ª–∫–∏'])
    dp.register_message_handler(get_stage_one, text='üí∏–ò–º–∏—Ç–∞—Ü–∏—è —Å–¥–µ–ª–∫–∏', state=None)

    dp.register_message_handler(get_stage_two, state=AddStates.stage_one)
